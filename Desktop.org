#+title: Emacs Desktop Environment
#+property: header-args :mkdirp yes

This file contains configuration for my overall desktop environment.

* Fonts and Themes

I use [[https://github.com/derat/xsettingsd][xsettingsd]] as a minimal settings daemon for Xorg applications.  It replaces similar daemons from desktop environments like GNOME and XFCE and enables me to use a simple configuration file like the following:

*.config/xsettingsd/xsettingsd.conf:*

#+begin_src conf :tangle .config/xsettingsd/xsettingsd.conf :noweb yes

Net/ThemeName "Matcha-dark-azul"
Net/IconThemeName "Papirus-Dark"
Gtk/DecorationLayout "menu:minimize,maximize,close"
Gtk/FontName "Cantarell 12"
Gtk/MonospaceFontName "Fira Mono 12"
Gtk/CursorThemeName "Adwaita"
Xft/Antialias 1
Xft/Hinting 0
Xft/HintStyle "hintnone"

#+end_src

I also have to do an extra step to make sure Emacs can find the font path from the "desktop" profile.

*.config/fontconfig/fonts.conf:*

#+begin_src xml :tangle .config/fontconfig/fonts.conf

<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <dir>~/.guix-extra-profiles/fonts/fonts/share/fonts</dir>
  </fontconfig>

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref themes :noweb-sep ""

;; Settings Manager
"xsettingsd"

;; GTK Themes
"arc-theme"
"arc-icon-theme"
"matcha-theme"
"hicolor-icon-theme"
"gnome-icon-theme"
"gnome-backgrounds"
"papirus-icon-theme"
"guix-simplyblack-sddm-theme"

"murrine"

#+end_src

#+begin_src scheme :noweb-ref fonts :noweb-sep ""

;; Fonts
"font-mononoki"
"font-fira-mono"
"font-fira-code"
"font-abattis-cantarell"
"font-dejavu"
;; "font-google-noto" ; large file (~700 mb)
"font-gnu-freefont"
"font-liberation"
"font-awesome"
"font-google-material-design-icons"
"gs-fonts"

"fontmanager"
"fontconfig"

#+end_src


* Window Management

We use the excellent [[https://github.com/ch11ng/exwm][EXWM]] module as the basis for our Emacs Desktop Environment. The [[https://github.com/ch11ng/exwm/wiki][EXWM Wiki]] is a great place to find tips about how to configure everything!

*NOTE:* Make sure you’ve installed =nm-applet=, =pasystray= and =blueman= for the system tray apps to work!

** EXWM config

*** Helper functions

#+begin_src emacs-lisp :tangle .config/emacs/desktop.el

  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))
  
  (defun efs/set-wallpaper ()
    (interactive)
    ;; NOTE: You will need to update this to a valid background path!
    (start-process-shell-command
        "feh" nil  "feh --bg-scale /usr/share/backgrounds/matt-mcnulty-nyc-2nd-ave.jpg"))

  ;; fix for ivy-posframe in x11 windows
  (defun exwm-update-ivy-posframe-parameters (&rest args)
    (interactive)
    (if (equal major-mode 'exwm-mode)
      (progn (setq ivy-posframe-parameters 
        '((parent-frame nil)                                               
          (alpha . 92)                                               
          (left-fringe . 7)                                               
          (right-fringe . 7))))
    (progn (setq-local ivy-posframe-parameters 
      '((alpha . 92)                                   
        (left-fringe . 7)                                                   
        (right-fringe . 7))))))
        
(defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

(defun efs/exwm-update-title ()
  (pcase exwm-class-name
    ("Nightly" (exwm-workspace-rename-buffer (format "firefox: %s" exwm-title)))
    ("Chromium-browser" (exwm-workspace-rename-buffer (format "chromium: %s" exwm-title)))
    ("qutebrowser" (exwm-workspace-rename-buffer (format "qutebrowser: %s" exwm-title)))))

(defun efs/configure-window-by-class ()
  (interactive)
  (pcase exwm-class-name
    ((or "Nightly" "Chromium-browser" "qutebrowser") (exwm-workspace-move-window 2))
    ;; ("Sol" (exwm-workspace-move-window 3))
    ("mpv" (exwm-floating-toggle-floating)
           (exwm-layout-toggle-mode-line))))
           
#+end_src


*** Init hook

#+begin_src emacs-lisp :tangle .config/emacs/desktop.el

  (defun efs/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Open eshell by default
    ;; (eshell)
    ;; (find-file "/sudo:root@localhost:/etc/config.scm")
    ;; (find-file "~/Emacs.org")
    ;; (find-file "~/Desktop.org")
    ;; (vterm)

    ;; Show battery status in the mode line
    ;; (display-battery-mode 1)

    ;; Show the time and date in modeline
    ;; (setq display-time-day-and-date t)
    ;; (display-time-mode 1)
    ;; Also take a look at display-time-format and format-time-string

    ;; Launch panel
    (efs/start-panel)

    ;; Launch apps that will run in the background
    ;; (efs/run-in-background "volumeicon")
    ;; (efs/run-in-background "blueman-applet")
    (efs/run-in-background "pasystray")
    (efs/run-in-background "nm-applet"))

#+end_src


*** Configure exwm via use-package

#+begin_src emacs-lisp :tangle .config/emacs/desktop.el

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

    ;; When window title updates, use it to set the buffer name
    (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

    ;; Configure windows as they're created
    (add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class)

    ;; apply ivy-posframe fix for x11 windows
    ;; (add-to-list 'exwm-mode-hook 'exwm-update-ivy-posframe-parameters)
    ;; (advice-add 'set-window-buffer :after 'exwm-update-ivy-posframe-parameters)
    (add-to-list 'ivy-posframe-parameters '(parent-frame nil))

    ;; For polybar
    ;; (add-hook 'exwm-workspace-list-change-hook
    ;;       #'exwm-workspace--update-ewmh-desktop-names)

    ;; When EXWM starts up, do some extra configuration
    (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

     ;; Startup
     ;; (start-process-shell-command "xset" nil "xset r rate 300 50")
     ;; (start-process-shell-command "xsetroot" nil "xsetroot -cursor_name left_ptr")
     ;; (start-process-shell-command "picom" nil "picom")
     ;; (start-process-shell-command "nitrogen" nil "nitrogen --restore")
     ;; (start-process-shell-command "xsettingsd" nil "xsettingsd")
     ;; (start-process-shell-command "mpdris2" nil "mpdris2")
    ;; (start-process-shell-command "mpd" nil "mpd")

    ;; Load the system tray before exwm-init
    ;; (require 'exwm-systemtray)
    ;; (exwm-systemtray-enable)

#+end_src


*** Key bindings

#+begin_src emacs-lisp :tangle .config/emacs/desktop.el

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-u
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\M-!
        ?\C-\M-j  ;; Buffer list
        ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; Move between windows
            ([s-left] . windmove-left)
            ([?\s-h] . windmove-left)
            ([s-right] . windmove-right)
            ([?\s-l] . windmove-right)
            ([s-up] . windmove-up)
            ([?\s-k] . windmove-up)
            ([s-down] . windmove-down)
            ([?\s-j] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-`] . (lambda () (interactive)
            (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))
                      
                      (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
                      
                      ;; Resize windows
                      (exwm-input-set-key (kbd "s-[") 'shrink-window-horizontally)
                      (exwm-input-set-key (kbd "s-{") 'shrink-window)
                      (exwm-input-set-key (kbd "s-]") 'enlarge-window-horizontally)
                      (exwm-input-set-key (kbd "s-}") 'enlarge-window)

    (exwm-enable))

#+end_src


** Desktop Key Bindings

We use the [[https://github.com/DamienCassou/desktop-environment][desktop-environment]] package to automatically bind to well-known programs for controlling the volume, screen brightness, media playback, and doing other things like locking the screen and taking screenshots. Make sure that you install the necessary programs to make this functionality work! Check the [[https://github.com/DamienCassou/desktop-environment#default-configuration][default programs]] list to know what you need to install.

#+begin_src emacs-lisp :tangle .config/emacs/desktop.el

(use-package desktop-environment
  :after exwm
  :config (desktop-environment-mode)
  :custom
  (desktop-environment-brightness-small-increment "1%+")
  (desktop-environment-brightness-small-decrement "1%-")
  (desktop-environment-brightness-normal-increment "5%+")
  (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src


** Desktop File

This file is used by your “login manager” (GDM, LightDM, etc) to display EXWM as a desktop environment option when you log in.

*IMPORTANT:* Make sure you copy this file to =/etc/X11/xsessions/= :

#+begin_src shell

sudo cp ~/.config/emacs/exwm/my-exwm.desktop /etc/X11/xsessions/

#+end_src

Desktop entry content:

#+begin_src conf :tangle .config/emacs/exwm/my-exwm.desktop :noweb yes

[Desktop Entry]
Name=MY-EXWM
Comment=Emacs Window Manager
Exec=sh /home/andriy/.config/emacs/exwm/start-exwm.sh
TryExec=sh
Type=Application
X-LightDM-DesktopName=exwm
DesktopNames=my-exwm

#+end_src


** Launcher Script

This launcher script is invoked by =my-exwm.desktop= to start Emacs and load our desktop environment configuration. We also start up some other helpful applications to configure the desktop experience.

#+begin_src conf :tangle .config/emacs/exwm/start-exwm.sh

# Set the screen DPI (uncomment this if needed!)
# xrdb ~/.emacs.d/exwm/Xresources

# Run some commands
picom &
xsettingsd &
nitrogen --restore &
xset r rate 300 50 &
xsetroot -cursor_name left_ptr &
redshift &
xscreensaver --no-splash &

# Enable screen locking on suspend
# xss-lock -- slock &

# Fire it up
exec dbus-launch --exit-with-session exwm -mm --debug-init -l ~/.config/emacs/desktop.el

#+end_src

Make it executable.

#+begin_src shell

chmod 755 ~/.config/emacs/exwm/start-exwm.sh

#+end_src



** Polybar

#+begin_src emacs-lisp :tangle .config/emacs/desktop.el

(defvar efs/polybar-process nil
  "Holds the process of the running Polybar instance, if any")

(defun efs/kill-panel ()
  (interactive)
  (when efs/polybar-process
    (ignore-errors
      (kill-process efs/polybar-process)))
  (setq efs/polybar-process nil))

(defun efs/start-panel ()
  (interactive)
  (efs/kill-panel)
  (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

(defun efs/polybar-exwm-workspace ()
  (pcase exwm-workspace-current-index
    (0 "")
    (1 "")
    (2 "")
    (3 "")
    (4 "")))

#+end_src

#+begin_src emacs-lisp :tangle .config/emacs/desktop.el

(setq exwm-workspace-index-map
        (lambda (index)
          (let ((named-workspaces ["code" "brow" "extr" "slac" "lisp"]))
            (if (< index (length named-workspaces))
                (elt named-workspaces index)
              (number-to-string index)))))

(defun exwm-workspace--update-ewmh-desktop-names ()
  (xcb:+request exwm--connection
      (make-instance 'xcb:ewmh:set-_NET_DESKTOP_NAMES
                     :window exwm--root :data
                     (mapconcat (lambda (i) (funcall exwm-workspace-index-map i))
                                (number-sequence 0 (1- (exwm-workspace--count)))
                                "\0"))))

#+end_src

#+begin_src conf :tangle .config/polybar/config :noweb yes

; Docs: https://github.com/polybar/polybar
;==========================================================

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #f0232635
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea

[bar/panel]
width = 100%
height = 35
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=12:weight=bold;2"
font-1 = "Font Awesome:size=13;2"
font-2 = "Material Icons:size=15;3"
font-3 = "Fira Mono:size=13;-3"

modules-left = cpu temperature
modules-right = battery date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize

[module/ewmh]
type = internal/xworkspaces

; Only show workspaces defined on the same output as the bar
;
; Useful if you want to show monitor specific workspaces
; on different bars
;
; Default: false
pin-workspaces = true

; Create click handler used to focus desktop
; Default: true
enable-click = false

; Create scroll handlers used to cycle desktops
; Default: true
enable-scroll = false

[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "(efs/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-padding = 1

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = %percentage:2%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/date]
type = internal/date
interval = 5

date = "%a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

label = %date% %time%

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%% / %time%
format-charging = <animation-charging> <label-charging>
format-charging-underline = ${colors.underline-1}

label-discharging = %percentage%% / %time%
format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full = <ramp-capacity> <label-full>
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-underline = ${colors.underline-1}
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}

#+end_src


* Applications

** Browsers

*Guix Packages*

#+begin_src scheme :noweb-ref media :noweb-sep ""

"qutebrowser"

#+end_src

*** Qutebrowser

[[https://github.com/qutebrowser/qutebrowser][Qutebrowser]] is a great keyboard-centric browser which uses the Chromium rendering engine via QT 5's WebEngine component.  I've configured it to act more like Vimb for window-per-tab behavior that integrates well into Emacs.  One thing I like about this browser is that it does a much better job of remembering what windows you had open when it exits so that you can maintain your session more easily.  I also like that when you reopen a tab/window, the history of that window is still present.

*.config/qutebrowser/config.py*

#+begin_src python :tangle .config/qutebrowser/config.py :noweb yes

# c.auto_save.session = True
c.scrolling.smooth = True
c.session.lazy_restore = True
c.content.autoplay = False

c.fonts.default_size = "14pt"

# Scale pages and UI better for hidpi
c.zoom.default = "120%"
c.fonts.hints = "bold 16pt monospace"

# Better default fonts
c.fonts.web.family.standard = "Bitstream Vera Sans"
c.fonts.web.family.serif = "Bitstream Vera Serif"
c.fonts.web.family.sans_serif = "Bitstream Vera Sans"
c.fonts.web.family.fixed = "Fira Mono"
c.fonts.statusbar = "14pt Cantarell"

# Use dark mode where possible
# c.colors.webpage.darkmode.enabled = True
# c.colors.webpage.bg = "black"

# Automatically turn on insert mode when a loaded page focuses a text field
c.input.insert_mode.auto_load = True

# Make Ctrl+g quit everything like in Emacs
config.bind('<Ctrl-g>', 'leave-mode', mode='insert')
config.bind('<Ctrl-g>', 'leave-mode', mode='command')
config.bind('<Ctrl-g>', 'leave-mode', mode='prompt')
config.bind('<Ctrl-g>', 'leave-mode', mode='hint')

# Some other bindings
config.bind(',m', 'hint links spawn mpv {hint-url}')

#+end_src


** Media Players

*** mpv

[[https://mpv.io/][mpv]] is a simple yet powerful video player.  Paired with [[http://ytdl-org.github.io/youtube-dl/][youtube-dl]] it can even stream YouTube videos.  [[https://github.com/hoyon/mpv-mpris][mpv-mpris]] allows playback control via [[https://github.com/altdesktop/playerctl][playerctl]].

*.config/mpv/mpv.conf*

#+begin_src conf :tangle .config/mpv/mpv.conf :noweb yes

# Configure playback quality
# vo=gpu
# hwdec=vaapi
# profile=gpu-hq
# scale=ewa_lanczossharp
# cscale=ewa_lanczossharp

# Start the window in the upper right screen corner
geometry=22%-30+20

# Save video position on quit
save-position-on-quit

# Enable control by MPRIS
script=~/.guix-extra-profiles/desktop/desktop/lib/mpris.so

# Limit the resolution of YouTube videos
ytdl=yes
ytdl-format=bestvideo[height<=?720]+bestaudio/best

# When playing audio files, display the album art
audio-display=attachment

# Keep the player open after the file finishes
keep-open

#+end_src

*** mpd

[[https://github.com/MusicPlayerDaemon/MPD][Music Player Daemon]] (MPD) is a flexible, powerful, server-side application for playing music. Through plugins and libraries it can play a variety of sound files while being controlled by its network protocol.

*.config/mpd/mpd.conf*

#+begin_src conf :tangle .config/mpd/mpd.conf :noweb yes

# Recommended location for database
db_file            "~/.local/mpd/database"

# Logs to systemd journal
# log_file           "syslog"

# The music directory is by default the XDG directory, uncomment to amend and choose a different directory
music_directory    "~/Music"

# Uncomment to refresh the database whenever files in the music_directory are changed
auto_update "yes"

restore_paused "yes"

port "6600"

# Uncomment to enable the functionalities
playlist_directory "~/.local/mpd/playlists"
#pid_file           "~/.local/mpd/pid"
state_file         "~/.local/mpd/state"
sticker_file       "~/.local/mpd/sticker.sql"

# audio_output {
#     type "alsa"
#     name "My Alsa Device"
#     mixer_type "software"
# }

#+end_src

*** mpv and mpd packages

*Guix Packages*

#+begin_src scheme :noweb-ref media :noweb-sep ""

"mpv"
"mpv-mpris"
"youtube-dl"
"mpd"
"mpdris2"
"ncmpcpp"
"playerctl"

#+end_src

*** Codecs and Drivers

These packages are needed to enable many video formats to be played in browsers and video players.  VAAPI drivers are also used to enable hardware-accelerated video decoding.

*Guix Packages*

#+begin_src scheme :noweb-ref media :noweb-sep ""

"gstreamer"
"gst-plugins-base"
"gst-plugins-good"
"gst-plugins-bad"
"gst-plugins-ugly"
"gst-libav"
"intel-vaapi-driver"
"libva-utils"

#+end_src


** Image Viewers and Editors

*Guix Packages*

#+begin_src scheme :noweb-ref media :noweb-sep ""

"feh"
"gimp"
"scrot"

#+end_src


** Desktop Tools

[[https://github.com/jonls/redshift][Redshift]] adjusts the color temperature of your screen according to your surroundings. This may help your eyes hurt less if you are working in front of the screen at night.

#+begin_src conf :tangle .config/redshift/redshift.conf :noweb ye

[redshift]
location-provider=manual

[manual]
lat=48.862831
lon=25.003870

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref desktop-tools :noweb-sep ""

"picom"
"light"
"nitrogen"
"polybar"
"pavucontrol"
"pasystray"
"blueman"
;; "compton"
"redshift"
;; "gucharmap"
"fontmanager"
"brightnessctl"
"xdg-utils"      ;; For xdg-open, etc
"xdg-dbus-proxy" ;; For Flatpak
"gtk+:bin"       ;; For gtk-launch
"glib:bin"       ;; For gio-launch-desktop
"shared-mime-info"

#+end_src


** System Tools

*Guix Packages*

#+begin_src scheme :noweb-ref system-tools :noweb-sep ""

"btrfs-progs"
"htop"
"curl"
"wget"
"openssh"
"zip"
"unzip"

#+end_src


** Xorg Tools

*Guix Packages*

#+begin_src scheme :noweb-ref xorg-tools :noweb-sep ""

"xev"
"xset"
"xsetroot"
"xrdb"
"xhost"
"xmodmap"
"setxkbmap"
"xrandr"
"arandr"
"xss-lock"
"libinput"
"xinput"
"xscreensaver"

#+end_src


* Desktop Profile

The =desktop.scm= manifest holds the list of packages that I use to configure my desktop environment.  The package names are pulled from the relevant sections titled *Guix Packages* in this file (=Desktop.org=).

*.config/guix/manifests/desktop.scm:*

#+begin_src scheme :tangle .config/guix/manifests/media.scm :noweb yes

(specifications->manifest
 '(
   <<media>>
))

#+end_src

#+begin_src scheme :tangle .config/guix/manifests/themes.scm :noweb yes

(specifications->manifest
 '(
   <<themes>>
))

#+end_src

#+begin_src scheme :tangle .config/guix/manifests/fonts.scm :noweb yes

(specifications->manifest
 '(
   <<fonts>>
))

#+end_src

#+begin_src scheme :tangle .config/guix/manifests/desktop-tools.scm :noweb yes

(specifications->manifest
 '(
   <<desktop-tools>>
))

#+end_src

#+begin_src scheme :tangle .config/guix/manifests/xorg-tools.scm :noweb yes

(specifications->manifest
 '(
   <<xorg-tools>>
))

#+end_src

#+begin_src scheme :tangle .config/guix/manifests/system-tools.scm :noweb yes

(specifications->manifest
 '(
   <<system-tools>>
))

#+end_src
